# 00*14*02*A1*A1 FE 01 01 03 01 DD EA
class CCITT_CRC:
    def __init__(self):
        self.polynomial = 0x1102100    # 0001 0001 0000 0010 0001 0000 0000
        self.reset()

    # 最初のA1x3を入れるかで初期値を変えている
    # 読みだしたときはA1x3がきれいに読めることはないので省略した方を使う
    # CRC計算範囲はアドレスマーク(F8/FB/FC/FE)からCRCまで含める。結果が0になればOK
    def reset(self):
        #self.crcval = 0x84cf00        # In case AM = A1 A1 A1 + F8/FB/FC/FE
        self.crcval = 0xe59a00         # In case the 1st x3 A1s are omitted ( F8/FB/FC/FE )
    
    def get(self):
        return (self.crcval>>8) & 0xffff

    def data(self, buf):
        for byte in buf:
            #print(format(byte, '02X'))
            self.crcval  |= byte
            for i in range(8):
                self.crcval <<= 1
                if self.crcval & 0x1000000 != 0:
                    self.crcval  ^= self.polynomial

crc = CCITT_CRC()

# 読み出し時
# A1 A1 A1 [FE 01 01 03 01 DD EA] -> 00 00
crc.reset()
crc.data([0xfe, 0x01, 0x01, 0x03, 0x01, 0xdd, 0xea])
print(format(crc.get(), '04X'))

# 書き込み時
# A1 A1 A1 [FE 01 01 03 01 [00 00]] -> DD EA
crc.reset()
crc.data([0xfe, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00])
print(format(crc.get(), '04X'))


# A1 A1 A1 FE 01 01 10 01 8B CA
crc.reset()
crc.data([0xfe, 0x01, 0x01, 0x10, 0x01, 0x8b, 0xca])
print(format(crc.get(), '04X'))

# 読み出し時
# A1 A1 A1 [FB + FF*256 + FB E5] -> 00 00
crc.reset()
a  = [ 0xfb ]
a += [ 0xff ] * 256
a += [ 0xfb, 0xe5 ]
crc.data(a)
print(format(crc.get(), '04X'))

# 書き込み辞
# A1 A1 A1 [FB + FF*256 + 00 00] -> FB E5
crc.reset()
a  = [ 0xfb ]
a += [ 0xff ] * 256
a += [ 0x00, 0x00 ]
crc.data(a)
print(format(crc.get(), '04X'))



crc.reset()
crc.data([0xfe, 0x27, 0x01, 0x0c, 0x01, 0xdd, 0x02])
print(format(crc.get(), '04X'))

crc.reset()
crc.data([ 0xFB, 0x4F, 0x35, 0x7C, 0x96, 0x14, 0xB3, 0xAA, 0x4A, 0x74, 0x59, 0x38, 0x22, 0x0E, 0x5A, 0x40, 0x1D, 0x77, 0xAB, 0x3E, 0xFE, 0x33, 0xF4, 0x8E, 0xF3, 0x21, 0x70, 0x55, 0x62, 0x3D, 0x6C, 0x8D, 0xA6, 0x22, 0xC8, 0x55, 0x34, 0x00, 0x60, 0x8C, 0x00, 0x20, 0xE4, 0x76, 0x66, 0x32, 0x1F, 0x98, 0x1F, 0x03, 0x10, 0x8E, 0x52, 0x37, 0x11, 0xAC, 0xE4, 0x6E, 0x8F, 0x82, 0x70, 0xBA, 0xF4, 0x6B, 0x32, 0x3A, 0x24, 0x8E, 0x00, 0x26, 0x08, 0xEC, 0xFA, 0x52, 0x39, 0x32, 0x25, 0x6D, 0x2A, 0x16, 0x0D, 0x34, 0x17, 0xC1, 0x10, 0x1D, 0x03, 0x4F, 0x34, 0x02, 0x8E, 0x00, 0x00, 0x30, 0x1F, 0x27, 0x4D, 0x96, 0x18, 0x2B, 0xF8, 0x8D, 0x41, 0xA6, 0xE4, 0x5F, 0x44, 0x59, 0xD7, 0x1C, 0xC6, 0x90, 0x91, 0x19, 0x27, 0x0F, 0x97, 0x1B, 0xCC, 0x1A, 0x40, 0x97, 0x18, 0xD5, 0x1F, 0x27, 0xFC, 0x8D, 0x27, 0xC6, 0x94, 0x86, 0x01, 0x97, 0x1A, 0xD7, 0x18, 0xC6, 0xC0, 0x8E, 0x10, 0x00, 0xD5, 0x1F, 0x27, 0xFC, 0x2A, 0x0C, 0x96, 0x1B, 0xA7, 0xC0, 0x30, 0x1F, 0x26, 0xF2, 0x86, 0xD0, 0x97, 0x18, 0x8D, 0x06, 0x26, 0x0A, 0x6C, 0xE4, 0x35, 0x82, 0x96, 0x18, 0x47, 0x25, 0xFB, 0x39, 0x8E, 0xFF, 0xE0, 0x6F, 0x80, 0x8C, 0xFC, 0x00, 0x26, 0xA5, 0x86, 0x81, 0x97, 0x03, 0x20, 0x00, 0xC6, 0x68, 0x6F, 0x80, 0x5A, 0x26, 0xBE, 0x3C, 0xFF, 0x30, 0x03, 0x3E, 0x7F, 0x04, 0xD5, 0x13, 0xAB, 0x80, 0x35, 0x80, 0x1E, 0x18, 0x25, 0x3D, 0xB0, 0x6E, 0x8C, 0x00, 0x32, 0xE9, 0xB0, 0xFC, 0x70, 0x00, 0x00, 0x1F, 0xA2, 0x8A, 0x55, 0x10, 0x27, 0xF4, 0x4E, 0xFD, 0xFF, 0xF0, 0x89, 0x42, 0x16, 0x00, 0xC9, 0x19, 0xC0, 0x05, 0x8E, 0x8E, 0x9B, 0xCE, 0x90, 0x00, 0xCC, 0x08, 0x00, 0xEF, 0x02, 0xED, 0x04, 0x3B, 0xE6 ])
print(format(crc.get(), '04X'))

crc.reset()
crc.data([ 0xF8, 0x31, 0x20, 0x09, 0x20, 0x3C, 0x03, 0x9F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x38, 0x20, 0x0F, 0x04, 0x9F, 0x9F, 0x9F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x33, 0x00, 0x20, 0x0F, 0x9F, 0x9F, 0x9F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x33, 0x24, 0x08, 0x20, 0x33, 0x00, 0x20, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x33, 0x00, 0x20, 0x0F, 0x81, 0x3C, 0x9F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0xFF, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x23, 0x0F, 0x03, 0x24, 0x21, 0x24, 0x9F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x30, 0x3C, 0x09, 0x38, 0x27, 0x9F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0xFF, 0x33, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3C, 0x00, 0x03, 0x20, 0x33, 0x24, 0x08, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x99, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00 ])
print(format(crc.get(), '04X'))
#919e
# crc 3b,e6
